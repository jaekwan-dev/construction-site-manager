# 건축현장 관리도구 (Construction Site Manager) - Cursor Rules

## 프로젝트 개요
이 프로젝트는 건축현장을 효율적으로 관리하기 위한 웹 애플리케이션입니다. 
주요 목적은 신도시/택지지구 개발 건설현장 정보를 수집하고, 현장 관계자에게 콜드메일 발송을 위한 연락처 정보를 제공하는 것입니다.

## 기술 스택
- **Frontend**: Next.js 15, React 18, TypeScript
- **UI**: Tailwind CSS, shadcn/ui
- **State Management**: React Hooks
- **Build Tool**: Turbopack
- **APIs**: 공개데이터포털 API 연계

## 프로젝트 구조

### 📁 주요 디렉토리 구조
```
construction-site-manager/
├── src/
│   ├── app/                    # Next.js App Router
│   │   ├── layout.tsx          # 루트 레이아웃
│   │   ├── page.tsx            # 메인 페이지
│   │   ├── globals.css         # 전역 스타일
│   │   └── favicon.ico         # 파비콘
│   ├── components/             # React 컴포넌트
│   │   ├── ui/                 # shadcn/ui 컴포넌트
│   │   ├── dashboard/          # 대시보드 관련 컴포넌트
│   │   ├── search/             # 검색 관련 컴포넌트
│   │   └── project/            # 프로젝트 관리 컴포넌트
│   ├── lib/                    # 유틸리티 및 API
│   │   ├── api/                # API 서비스
│   │   ├── types/              # TypeScript 타입 정의
│   │   └── utils/              # 유틸리티 함수
│   └── hooks/                  # 커스텀 React Hooks
├── public/                     # 정적 파일
├── docs/                       # 문서
└── .env.local                  # 환경 변수 (API 키 등)
```

### 🎯 핵심 기능별 컴포넌트 구조

#### 1. 통계 대시보드 (📊)
- `components/dashboard/StatsDashboard.tsx` - 전체 현장수, 매치공 현장, 6개월 내 준공사업 현장 통계
- `components/dashboard/DashboardOverview.tsx` - 대시보드 개요

#### 2. 신도시 현장 조회 (🔍) - **가장 중요**
- `components/search/NewtownSearch.tsx` - 신도시 현장 검색 메인 컴포넌트
- `components/search/NewtownPermitSearch.tsx` - 건축허가 검색
- `components/search/SearchFilters.tsx` - 검색 필터 (준공예정일, 상태별)
- `components/search/SearchResults.tsx` - 검색 결과 테이블

#### 3. 현장관리 (🎯)
- `components/project/TargetProjectsList.tsx` - 관심 현장 목록
- `components/project/ProjectTable.tsx` - 프로젝트 테이블
- `components/project/ProjectDetailDialog.tsx` - 상세정보 다이얼로그

#### 4. 상세정보 조회 (🔍)
- `components/detail/CompanyInfoDialog.tsx` - 건설회사 상세정보
- `components/detail/SafetyInfoDialog.tsx` - 안전정보
- `components/detail/ConstructionInfoDialog.tsx` - 건설정보
- `components/detail/RegionalInfoDialog.tsx` - 지역정보

#### 5. API 상태 관리 (🛠)
- `components/api/ApiStatus.tsx` - API 연결 상태 표시
- `components/api/ApiKeyDialog.tsx` - API 키 설정 다이얼로그

### 🔌 API 연계 구조

#### 공개데이터포털 API 목록
1. **KISCON 공개데이터 API**
   - 건설회사 상세정보
   - 건설업 등록증 정보
   - 건설실적 정보

2. **생활안전지도 API**
   - 위치 기반 안전정보
   - 위험 시설물 위치
   - 접근 경로 정보

3. **건설사업정보시스템 OpenAPI**
   - 설계도서 연계
   - 건설감리보고서
   - 시설유지관리 정보

4. **지역별 건설현장 API**
   - 공사장 진행률
   - 환경측정 데이터
   - 교통통제 계획

### 📝 개발 가이드라인

#### 1. 컴포넌트 작성 규칙
- 모든 컴포넌트는 TypeScript로 작성
- Props 인터페이스 명시적 정의
- 컴포넌트명은 PascalCase 사용
- 파일명은 컴포넌트명과 동일하게 작성

#### 2. API 호출 규칙
- `lib/api/` 디렉토리에 API 서비스 클래스 작성
- 에러 처리 및 로딩 상태 관리
- API 키 미설정 시 테스트 데이터 제공
- Graceful Fallback 구현

#### 3. 상태 관리 규칙
- React Hooks 사용 (useState, useEffect, useContext)
- 전역 상태는 Context API 활용
- 로컬 스토리지 자동 저장 구현

#### 4. 스타일링 규칙
- Tailwind CSS 클래스 우선 사용
- shadcn/ui 컴포넌트 활용
- 반응형 디자인 적용
- 다크모드 지원 고려

#### 5. 타입 정의 규칙
- `lib/types/` 디렉토리에 타입 정의
- API 응답 타입 명시적 정의
- 재사용 가능한 타입 인터페이스 작성

### 🚀 주요 개발 우선순위

#### Phase 1: 기본 구조 및 검색 기능
1. 프로젝트 기본 구조 설정
2. 신도시 현장 검색 기능 구현
3. 기본 테이블 및 필터링 기능

#### Phase 2: API 연계 및 상세정보
1. 공개데이터포털 API 연계
2. 상세정보 다이얼로그 구현
3. CSV/Excel 다운로드 기능

#### Phase 3: 현장관리 및 대시보드
1. 관심 현장 등록/관리 기능
2. 통계 대시보드 구현
3. 위치 기반 기능

#### Phase 4: 고급 기능
1. 지도 기반 현장 위치 표시
2. 알림 설정 기능
3. 데이터 분석 및 인사이트

### 🔧 개발 환경 설정

#### 필수 환경 변수 (.env.local)
```
NEXT_PUBLIC_DATA_API_KEY=공개데이터포털_API_키
NEXT_PUBLIC_KISCON_API_KEY=KISCON_API_키
NEXT_PUBLIC_SAFETY_API_KEY=생활안전지도_API_키
NEXT_PUBLIC_CONSTRUCTION_API_KEY=건설사업정보시스템_API_키
```

#### 개발 명령어
```bash
npm run dev          # 개발 서버 실행
npm run build        # 프로덕션 빌드
npm run start        # 프로덕션 서버 실행
npm run lint         # ESLint 실행
```

### 📋 코드 품질 기준

#### 1. TypeScript 사용
- 모든 파일에서 TypeScript 사용
- any 타입 사용 금지
- 명시적 타입 정의

#### 2. 에러 처리
- API 호출 시 try-catch 사용
- 사용자 친화적 에러 메시지
- 로딩 상태 표시

#### 3. 성능 최적화
- React.memo 적절히 사용
- 불필요한 리렌더링 방지
- 이미지 최적화

#### 4. 접근성
- ARIA 라벨 사용
- 키보드 네비게이션 지원
- 색상 대비 고려

### 🎨 UI/UX 가이드라인

#### 1. 디자인 시스템
- shadcn/ui 컴포넌트 활용
- 일관된 색상 팔레트 사용
- 반응형 그리드 시스템

#### 2. 사용자 경험
- 직관적인 네비게이션
- 빠른 검색 및 필터링
- 명확한 피드백 제공

#### 3. 데이터 표시
- 테이블 형태로 정보 정리
- 정렬 및 필터링 기능
- 페이지네이션 구현

이 규칙을 따라 개발하면 일관성 있고 유지보수가 용이한 건축현장 관리도구를 만들 수 있습니다. 